version: '3.8'

services:
  # Production service
  web:
    build:
      context: .
      dockerfile: Dockerfile
    image: 3idashboard:latest
    container_name: 3idashboard-prod
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOST=0.0.0.0
      - NEXT_TELEMETRY_DISABLED=1
    env_file:
      - .env.production
    volumes:
      # Cache volume for better performance
      - nextjs-cache:/app/.next/cache
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/comet-data', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); });"]
      interval: 30s
      timeout: 3s
      start_period: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Development service with hot reload
  dev:
    build:
      context: .
      target: builder
    container_name: 3idashboard-dev
    ports:
      - "3020:3000"
    environment:
      - NODE_ENV=development
      - NEXT_TELEMETRY_DISABLED=1
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    working_dir: /app
    command: sh -c "npm install --legacy-peer-deps && npm run dev"
    profiles: ["dev"]

  # Optional: PostgreSQL database for future enhancements
  db:
    image: postgres:15-alpine
    container_name: 3idashboard-db
    environment:
      - POSTGRES_DB=comet3i
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    profiles: ["with-db"]
    restart: unless-stopped

  # Optional: Redis cache for enhanced performance
  redis:
    image: redis:7-alpine
    container_name: 3idashboard-redis
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    profiles: ["with-cache"]
    restart: unless-stopped

volumes:
  nextjs-cache:
    driver: local
  postgres_data:
    driver: local
  redis-data:
    driver: local