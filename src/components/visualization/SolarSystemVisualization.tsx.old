'use client';

import { useEffect, useState } from 'react';

interface SolarSystemData {
  comet_position: {
    x: number;
    y: number;
    z: number;
    distance_from_sun: number;
    distance_from_earth: number;
  };
  earth_position: {
    x: number;
    y: number;
    z: number;
  };
  planets: Array<{
    name: string;
    x: number;
    y: number;
    z: number;
    distance_from_sun: number;
  }>;
  orbital_trail: Array<{
    date: string;
    x: number;
    y: number;
    z: number;
    distance_from_sun: number;
  }>;
}

// Planet visual properties: color and size for rendering
const planetVisuals: Record<string, { color: string; size: number }> = {
  Mercury: { color: '#8C7853', size: 3 },
  Venus: { color: '#FFC649', size: 4 },
  Earth: { color: '#3B82F6', size: 4 },
  Mars: { color: '#DC2626', size: 3 },
  Jupiter: { color: '#D4A574', size: 8 },
  Saturn: { color: '#F4D47C', size: 7 },
  Uranus: { color: '#4FC3F7', size: 5 },
  Neptune: { color: '#5E72E4', size: 5 },
  Pluto: { color: '#C2A37D', size: 2 }
};

export default function SolarSystemVisualization() {
  const [data, setData] = useState<SolarSystemData | null>(null);
  const [loading, setLoading] = useState(true);
  const [zoom, setZoom] = useState(1.0); // Zoom level (0.5 to 3.0)

  useEffect(() => {
    fetchSolarSystemData();
  }, []);

  const fetchSolarSystemData = async () => {
    try {
      const response = await fetch('/api/solar-system-position?trail_days=90');
      const result = await response.json();
      if (result.success) {
        setData(result.data);
      }
    } catch (error) {
      console.error('Error fetching solar system data:', error);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="bg-gray-800 rounded-lg p-8 flex items-center justify-center">
        <div className="text-gray-400">Loading solar system visualization...</div>
      </div>
    );
  }

  if (!data) {
    return (
      <div className="bg-gray-800 rounded-lg p-8 flex items-center justify-center">
        <div className="text-gray-400">Solar system data unavailable</div>
      </div>
    );
  }

  // SVG viewport settings (top-down view of solar system)
  const baseScale = 8; // base pixels per AU (reduced to show Pluto at 39.5 AU)
  const scale = baseScale * zoom; // Apply zoom to scale
  const centerX = 400;
  const centerY = 400;
  const viewSize = 800;

  // Convert AU coordinates to SVG pixels
  const toSVG = (x: number, y: number) => ({
    x: centerX + x * scale,
    y: centerY - y * scale // Flip Y axis for standard orientation
  });

  // Use planet positions (real JPL Horizons data or calculated fallback)
  const planetPositions = (data.planets || []).map(planet => {
    const visual = planetVisuals[planet.name] || { color: '#FFFFFF', size: 3 };
    return {
      name: planet.name,
      x: planet.x,
      y: planet.y,
      distance: planet.distance_from_sun,
      color: visual.color,
      size: visual.size
    };
  });

  const sunPos = toSVG(0, 0);
  const cometPos = toSVG(data.comet_position.x, data.comet_position.y);

  // Create smooth curved path for comet trajectory using SVG path
  const createCometPath = () => {
    if (data.orbital_trail.length < 2) return '';

    let path = '';
    data.orbital_trail.forEach((point, index) => {
      const pos = toSVG(point.x, point.y);
      if (index === 0) {
        path += `M ${pos.x} ${pos.y}`;
      } else {
        // Use quadratic bezier curves for smooth trajectory
        const prevPoint = data.orbital_trail[index - 1];
        const prevPos = toSVG(prevPoint.x, prevPoint.y);
        const controlX = (prevPos.x + pos.x) / 2;
        const controlY = (prevPos.y + pos.y) / 2;
        path += ` Q ${controlX} ${controlY} ${pos.x} ${pos.y}`;
      }
    });
    return path;
  };

  const cometPath = createCometPath();

  const handleZoomIn = () => setZoom(prev => Math.min(prev + 0.2, 3.0));
  const handleZoomOut = () => setZoom(prev => Math.max(prev - 0.2, 0.5));
  const handleZoomReset = () => setZoom(1.0);

  return (
    <div className="bg-gray-800 rounded-lg p-6">
      <div className="text-center mb-4">
        <h3 className="text-xl font-semibold text-white mb-2">
          Current Solar System Position
        </h3>
        <p className="text-sm text-gray-400">
          Top-down view with real planet positions from JPL Horizons • 3I/ATLAS trajectory
        </p>
      </div>

      {/* Zoom Controls */}
      <div className="flex justify-center gap-2 mb-4">
        <button
          onClick={handleZoomOut}
          className="px-3 py-1 bg-gray-700 hover:bg-gray-600 text-white rounded-lg text-sm font-semibold transition-colors"
          title="Zoom Out"
        >
          −
        </button>
        <button
          onClick={handleZoomReset}
          className="px-3 py-1 bg-gray-700 hover:bg-gray-600 text-white rounded-lg text-sm transition-colors"
          title="Reset Zoom"
        >
          {(zoom * 100).toFixed(0)}%
        </button>
        <button
          onClick={handleZoomIn}
          className="px-3 py-1 bg-gray-700 hover:bg-gray-600 text-white rounded-lg text-sm font-semibold transition-colors"
          title="Zoom In"
        >
          +
        </button>
      </div>

      <div className="flex justify-center mb-4">
        <svg
          width={viewSize}
          height={viewSize}
          viewBox={`0 0 ${viewSize} ${viewSize}`}
          className="bg-gray-900 rounded-lg"
        >
          {/* Background grid */}
          <defs>
            <pattern id="grid" width="40" height="40" patternUnits="userSpaceOnUse">
              <path d="M 40 0 L 0 0 0 40" fill="none" stroke="rgba(255,255,255,0.05)" strokeWidth="0.5"/>
            </pattern>
            <radialGradient id="sunGlow">
              <stop offset="0%" stopColor="#FDB813" stopOpacity="1"/>
              <stop offset="100%" stopColor="#FDB813" stopOpacity="0"/>
            </radialGradient>
          </defs>
          <rect width={viewSize} height={viewSize} fill="url(#grid)" />

          {/* Planetary orbits */}
          {planetPositions.map(planet => (
            <circle
              key={`orbit-${planet.name}`}
              cx={centerX}
              cy={centerY}
              r={planet.distance * scale}
              fill="none"
              stroke="rgba(255,255,255,0.1)"
              strokeWidth="1"
              strokeDasharray="4,4"
            />
          ))}

          {/* Comet orbital trail (curved path) */}
          {cometPath && (
            <path
              d={cometPath}
              fill="none"
              stroke="rgba(251, 146, 60, 0.5)"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            />
          )}

          {/* Sun */}
          <circle cx={sunPos.x} cy={sunPos.y} r="20" fill="url(#sunGlow)" opacity="0.4" />
          <circle cx={sunPos.x} cy={sunPos.y} r="10" fill="#FDB813">
            <animate attributeName="opacity" values="1;0.8;1" dur="2s" repeatCount="indefinite" />
          </circle>

          {/* Planets - real JPL Horizons positions or calculated fallback */}
          {planetPositions.map(planet => {
            const pos = toSVG(planet.x, planet.y);
            // Show labels for inner planets and major outer planets
            const shouldShowLabel = planet.distance <= 2 || ['Jupiter', 'Saturn', 'Uranus', 'Neptune', 'Pluto'].includes(planet.name);
            return (
              <g key={planet.name}>
                <circle cx={pos.x} cy={pos.y} r={planet.size} fill={planet.color} />
                <circle cx={pos.x} cy={pos.y} r={planet.size + 2} fill={planet.color} opacity="0.2" />
                {shouldShowLabel && (
                  <text
                    x={pos.x}
                    y={pos.y - planet.size - 8}
                    fill={planet.color}
                    fontSize="9"
                    textAnchor="middle"
                    fontWeight="500"
                  >
                    {planet.name}
                  </text>
                )}
              </g>
            );
          })}

          {/* Comet 3I/ATLAS */}
          <g>
            {/* Comet glow */}
            <circle cx={cometPos.x} cy={cometPos.y} r="14" fill="#F97316" opacity="0.3">
              <animate attributeName="r" values="14;18;14" dur="2s" repeatCount="indefinite" />
            </circle>
            {/* Comet core */}
            <circle cx={cometPos.x} cy={cometPos.y} r="7" fill="#F97316">
              <animate attributeName="opacity" values="1;0.7;1" dur="1.5s" repeatCount="indefinite" />
            </circle>
          </g>

          {/* Labels */}
          <text x={sunPos.x} y={sunPos.y - 25} fill="#FDB813" fontSize="14" textAnchor="middle" fontWeight="bold">
            ☉ Sun
          </text>
          <text x={cometPos.x} y={cometPos.y - 25} fill="#F97316" fontSize="13" textAnchor="middle" fontWeight="bold">
            ☄️ 3I/ATLAS
          </text>

          {/* Scale reference */}
          <line x1="20" y1={viewSize - 30} x2={20 + (10 * scale)} y2={viewSize - 30} stroke="white" strokeWidth="2" />
          <text x="20" y={viewSize - 35} fill="white" fontSize="10">
            10 AU
          </text>
        </svg>
      </div>

      {/* Distance Information */}
      <div className="grid grid-cols-2 gap-4 text-center text-sm">
        <div className="bg-gray-700 rounded-lg p-3">
          <div className="text-yellow-400 font-semibold">
            {data.comet_position.distance_from_sun.toFixed(3)} AU
          </div>
          <div className="text-gray-400 text-xs mt-1">From Sun</div>
        </div>
        <div className="bg-gray-700 rounded-lg p-3">
          <div className="text-blue-400 font-semibold">
            {data.comet_position.distance_from_earth.toFixed(3)} AU
          </div>
          <div className="text-gray-400 text-xs mt-1">From Earth</div>
        </div>
      </div>

      <div className="mt-4 text-xs text-gray-500 text-center">
        1 AU = 149.6 million km • Includes all 8 planets + Pluto • 3I/ATLAS position from NASA/JPL Horizons
      </div>
    </div>
  );
}